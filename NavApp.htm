<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MGA Campus Map</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <link rel="stylesheet" href="NavApp.css"/>
    <link rel="stylesheet" href="NavApp.sql"/>
</head>
<body>
    <div class="container">
        <h1>MGA Campus Navigation</h1>
        
        <div class="search-box">
            <input type="text" id="search" placeholder="Search campuses or buildings...">
            <button onclick="search()">Search</button>
        </div>
        
        <div class="map-container">
            <div id="map"></div>
            <div id="info">
                <h2>Campuses</h2>
                <div id="results"></div>
            </div>
        </div>
    </div>

    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script>
        // MGA Campus Data
        const campuses = [
            {
                id: 1,
                name: "Cochran Campus",
                address: "1100 Second Street SE, Cochran, GA 31014",
                lat: 32.3868,
                lng: -83.3547,
                buildings: [
                    { name: "Russell Auditorium", lat: 32.3875, lng: -83.3550, desc: "Performance venue" },
                    { name: "Student Rec Center", lat: 32.3865, lng: -83.3538, desc: "Fitness facilities" },
                    { name: "Roberts Library", lat: 32.3870, lng: -83.3542, desc: "Main library" }
                ]
            },
            {
                id: 2,
                name: "Macon Campus",
                address: "100 University Parkway, Macon, GA 31206",
                lat: 32.808092,
                lng: -83.732058,
                buildings: [
    { name: "Administration (ADMIN)", lat: 32.808092, lng: -83.732058, desc: "Student Services" },
    { name: "Library (LIB)", lat: 32.808092, lng: -83.732058, desc: "Administration" },
    { name: "Facilities (FAC)", lat: 32.808092, lng: -83.732058, desc: "Classrooms" },
    { name: "Campus Support Services (CSS)", lat: 32.808092, lng: -83.732058, desc: "Campus Support Services" },
    { name: "Mathematics (MATH)", lat: 32.808092, lng: -83.732058, desc: "Math" },
    { name: "Math Auditorium (AUD)", lat: 32.808092, lng: -83.732058, desc: "Math" },
    { name: "Charles H. Jones Building (Jones)", lat: 32.808092, lng: -83.732058, desc: "" },
    { name: "Professional Sciences Center (PSC)", lat: 32.808092, lng: -83.732058, desc: "" },
    { name: "Teacher Education Building (TEB)", lat: 32.808092, lng: -83.732058, desc: "" },
    { name: "Student Life Center (SLC)", lat: 32.808092, lng: -83.732058, desc: "Student Life" },
    { name: "Music (MUS)", lat: 32.808092, lng: -83.732058, desc: "Music" },
    { name: "Arts Complex (ART)", lat: 32.808092, lng: -83.732058, desc: "Art" },
    { name: "School of Arts & Letters (SOAL)", lat: 32.808092, lng: -83.732058, desc: "" },
    { name: "Recreation & Wellness Center (REC)", lat: 32.808092, lng: -83.732058, desc: "Recreation" },
    { name: "Lakeview Pointe (LP)", lat: 32.808092, lng: -83.732058, desc: "Residence" },
    { name: "University Pointe (UP)", lat: 32.808092, lng: -83.732058, desc: "Residence" },
    { name: "Peyton T. Anderson Enrollment Center (PAC)", lat: 32.808092, lng: -83.732058, desc: "Enrollment" }
        ]

            },
            {
                id: 3,
                name: "Dublin Campus",
                address: "800 Veterans Blvd, Dublin, GA 31021",
                lat: 32.5404,
                lng: -82.9038,
                buildings: [
                    { name: "Academic Building", lat: 32.5400, lng: -82.9035, desc: "Classrooms" },
                    { name: "Student Services", lat: 32.5408, lng: -82.9040, desc: "Admissions" }
                ]
            }
        ];

        // Map variables
        let map;
        let markers = [];

        // Initialize the map
        function initMap() {
            map = L.map('map').setView([32.8276, -83.6605], 15); // Default view centered on Macon campus
            
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; OpenStreetMap contributors'
            }).addTo(map);
            
            // Automatically show Macon campus on load
            showCampus(2);
        }

        // Show all campuses on the map
        function showAllCampuses() {
            clearMarkers();
            
            let html = "";
            campuses.forEach(campus => {
                // Add campus marker
                const marker = L.marker([campus.lat, campus.lng])
                    .addTo(map)
                    .bindPopup(`<b>${campus.name}</b><br>${campus.address}`)
                    .on('click', () => showCampus(campus.id));
                
                markers.push(marker);
                
                // Add to info panel
                html += `
                    <div class="campus" onclick="showCampus(${campus.id})">
                        <h3>${campus.name}</h3>
                        <p>${campus.address}</p>
                    </div>
                `;
            });
            
            document.getElementById('results').innerHTML = html;
            map.fitBounds(markers.map(m => m.getLatLng()));
        }

        // Show a specific campus and its buildings
        function showCampus(campusId) {
            clearMarkers();
            
            const campus = campuses.find(c => c.id === campusId);
            if (!campus) return;
            
            // Add campus marker
            const campusMarker = L.marker([campus.lat, campus.lng])
                .addTo(map)
                .bindPopup(`<b>${campus.name}</b><br>${campus.address}`);
            markers.push(campusMarker);
            
            // Add building markers
            campus.buildings.forEach(building => {
                const marker = L.marker([building.lat, building.lng], {
                    icon: L.divIcon({
                        className: 'building-icon',
                        html: 'üèõÔ∏è',
                        iconSize: [30, 30]
                    })
                })
                .addTo(map)
                .bindPopup(`<b>${building.name}</b><br>${building.desc}`);
                markers.push(marker);
            });
            
            // Zoom to campus
            map.setView([campus.lat, campus.lng], 15);
            
            // Update info panel
            let html = `
                <button onclick="showAllCampuses()">‚Üê All Campuses</button>
                <h2>${campus.name}</h2>
                <p>${campus.address}</p>
                <h3>Buildings</h3>
                <div class="buildings-list">
            `;
            
            campus.buildings.forEach(building => {
                html += `
                    <div class="building" onclick="zoomToBuilding(${building.lat}, ${building.lng})">
                        <h4>${building.name}</h4>
                        <p>${building.desc}</p>
                    </div>
                `;
            });
            
            html += `</div>`;
            document.getElementById('results').innerHTML = html;
        }

        // Search function
        function search() {
            const term = document.getElementById('search').value.toLowerCase();
            if (!term) {
                showAllCampuses();
                return;
            }
            
            let results = [];
            
            // Search campuses
            campuses.forEach(campus => {
                if (campus.name.toLowerCase().includes(term)) {
                    results.push({ type: 'campus', data: campus });
                }
                
                // Search buildings
                campus.buildings.forEach(building => {
                    if (building.name.toLowerCase().includes(term)) {
                        results.push({ type: 'building', data: building, campus: campus });
                    }
                });
            });
            
            displaySearchResults(results);
        }

        // Display search results
        function displaySearchResults(results) {
            clearMarkers();
            
            if (results.length === 0) {
                document.getElementById('results').innerHTML = "<p>No results found</p>";
                return;
            }
            
            let html = "<h2>Search Results</h2>";
            const locations = [];
            
            results.forEach(result => {
                if (result.type === 'campus') {
                    const campus = result.data;
                    locations.push([campus.lat, campus.lng]);
                    html += `
                        <div class="campus" onclick="showCampus(${campus.id})">
                            <h3>${campus.name}</h3>
                            <p>${campus.address}</p>
                        </div>
                    `;
                } else {
                    const building = result.data;
                    const campus = result.campus;
                    locations.push([building.lat, building.lng]);
                    html += `
                        <div class="building" onclick="zoomToBuilding(${building.lat}, ${building.lng})">
                            <h4>${building.name}</h4>
                            <p>${campus.name}</p>
                            <p>${building.desc}</p>
                        </div>
                    `;
                    
                    // Add marker for building
                    const marker = L.marker([building.lat, building.lng], {
                        icon: L.divIcon({
                            className: 'building-icon',
                            html: 'üèõÔ∏è',
                            iconSize: [30, 30]
                        })
                    })
                    .addTo(map)
                    .bindPopup(`<b>${building.name}</b><br>${building.desc}`);
                    markers.push(marker);
                }
            });
            
            document.getElementById('results').innerHTML = html;
            
            // Zoom to show all results
            if (locations.length > 0) {
                map.fitBounds(locations);
            }
        }

        // Helper functions
        function clearMarkers() {
            markers.forEach(marker => map.removeLayer(marker));
            markers = [];
        }

        function zoomToBuilding(lat, lng) {
            map.setView([lat, lng], 18);
        }

        // Initialize when page loads
        window.onload = initMap;
    </script>
    <style>
        .container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            font-family: Arial, sans-serif;
        }
        
        h1 {
            text-align: center;
            color: #003366;
            margin: 20px 0;
        }
        
        .search-box {
            display: flex;
            justify-content: center;
            margin: 10px 0;
        }
        
        .search-box input {
            padding: 10px;
            width: 300px;
            border: 1px solid #ccc;
            border-radius: 4px 0 0 4px;
        }
        
        .search-box button {
            padding: 10px 15px;
            background-color: #003366;
            color: white;
            border: none;
            border-radius: 0 4px 4px 0;
            cursor: pointer;
        }
        
        .map-container {
            display: flex;
            flex: 1;
            margin: 10px;
        }
        
        #map {
            flex: 2;
            height: 100%;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        
        #info {
            flex: 1;
            padding: 15px;
            margin-left: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            overflow-y: auto;
        }
        
        .campus, .building {
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #eee;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .campus:hover, .building:hover {
            background-color: #f5f5f5;
        }
        
        .building-icon {
            text-align: center;
            font-size: 20px;
        }
        
        .buildings-list {
            max-height: 500px;
            overflow-y: auto;
        }
    </style>
</body>
</html>


